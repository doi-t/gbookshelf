// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gbookshelf.proto

package gbookshelf

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Book struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Page                 int32    `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Done                 bool     `protobuf:"varint,3,opt,name=done,proto3" json:"done,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Book) Reset()         { *m = Book{} }
func (m *Book) String() string { return proto.CompactTextString(m) }
func (*Book) ProtoMessage()    {}
func (*Book) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ba0627d911171ab, []int{0}
}

func (m *Book) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Book.Unmarshal(m, b)
}
func (m *Book) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Book.Marshal(b, m, deterministic)
}
func (m *Book) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Book.Merge(m, src)
}
func (m *Book) XXX_Size() int {
	return xxx_messageInfo_Book.Size(m)
}
func (m *Book) XXX_DiscardUnknown() {
	xxx_messageInfo_Book.DiscardUnknown(m)
}

var xxx_messageInfo_Book proto.InternalMessageInfo

func (m *Book) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Book) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *Book) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

type Books struct {
	Books                []*Book  `protobuf:"bytes,1,rep,name=books,proto3" json:"books,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Books) Reset()         { *m = Books{} }
func (m *Books) String() string { return proto.CompactTextString(m) }
func (*Books) ProtoMessage()    {}
func (*Books) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ba0627d911171ab, []int{1}
}

func (m *Books) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Books.Unmarshal(m, b)
}
func (m *Books) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Books.Marshal(b, m, deterministic)
}
func (m *Books) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Books.Merge(m, src)
}
func (m *Books) XXX_Size() int {
	return xxx_messageInfo_Books.Size(m)
}
func (m *Books) XXX_DiscardUnknown() {
	xxx_messageInfo_Books.DiscardUnknown(m)
}

var xxx_messageInfo_Books proto.InternalMessageInfo

func (m *Books) GetBooks() []*Book {
	if m != nil {
		return m.Books
	}
	return nil
}

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_7ba0627d911171ab, []int{2}
}

func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Book)(nil), "gbookshelf.Book")
	proto.RegisterType((*Books)(nil), "gbookshelf.Books")
	proto.RegisterType((*Void)(nil), "gbookshelf.Void")
}

func init() { proto.RegisterFile("gbookshelf.proto", fileDescriptor_7ba0627d911171ab) }

var fileDescriptor_7ba0627d911171ab = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xb1, 0x4a, 0xc5, 0x30,
	0x14, 0x86, 0x6f, 0x6c, 0x52, 0xbc, 0xc7, 0xe5, 0x7a, 0x70, 0x08, 0x9d, 0x42, 0x06, 0x09, 0x88,
	0x15, 0xea, 0x13, 0x28, 0x8e, 0x4e, 0x11, 0xdd, 0x5b, 0x12, 0x6b, 0x69, 0xf5, 0x14, 0x13, 0x7c,
	0x45, 0x5f, 0x4b, 0x92, 0x0e, 0xea, 0xed, 0xd2, 0xed, 0xcf, 0x97, 0x2f, 0xff, 0x0f, 0x81, 0x43,
	0xdf, 0x11, 0x8d, 0xe1, 0xcd, 0x4f, 0xaf, 0xf5, 0xfc, 0x49, 0x91, 0x10, 0x7e, 0x89, 0x7e, 0x00,
	0x7e, 0x4f, 0x34, 0xe2, 0x05, 0x88, 0x38, 0xc4, 0xc9, 0x4b, 0xa6, 0x98, 0xd9, 0xdb, 0xe5, 0x80,
	0x08, 0x7c, 0x6e, 0x7b, 0x2f, 0x4f, 0x14, 0x33, 0xc2, 0xe6, 0x9c, 0x98, 0xa3, 0x0f, 0x2f, 0x0b,
	0xc5, 0xcc, 0xa9, 0xcd, 0x59, 0xdf, 0x80, 0x48, 0x2d, 0x01, 0x2f, 0x41, 0xe4, 0x6e, 0xc9, 0x54,
	0x61, 0xce, 0x9a, 0x43, 0xfd, 0x67, 0x3c, 0x19, 0x76, 0xb9, 0xd6, 0x25, 0xf0, 0x17, 0x1a, 0x5c,
	0xf3, 0xcd, 0x60, 0x9f, 0xf8, 0x53, 0x32, 0xf0, 0x1a, 0xf8, 0xe3, 0x10, 0x22, 0xfe, 0x7b, 0x96,
	0xbc, 0xea, 0xfc, 0xb8, 0x28, 0xe8, 0x1d, 0x5e, 0x41, 0x71, 0xe7, 0x1c, 0xae, 0x46, 0xaa, 0x15,
	0xd1, 0x3b, 0xac, 0xa1, 0xb4, 0xfe, 0x9d, 0xbe, 0xfc, 0x76, 0xff, 0x79, 0x76, 0x6d, 0xdc, 0xe8,
	0x77, 0x65, 0xfe, 0xdb, 0xdb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8b, 0xa2, 0xe4, 0x06, 0x6f,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BookShelfClient is the client API for BookShelf service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BookShelfClient interface {
	List(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Books, error)
	Add(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error)
	Remove(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error)
	Update(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error)
}

type bookShelfClient struct {
	cc *grpc.ClientConn
}

func NewBookShelfClient(cc *grpc.ClientConn) BookShelfClient {
	return &bookShelfClient{cc}
}

func (c *bookShelfClient) List(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Books, error) {
	out := new(Books)
	err := c.cc.Invoke(ctx, "/gbookshelf.BookShelf/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookShelfClient) Add(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/gbookshelf.BookShelf/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookShelfClient) Remove(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/gbookshelf.BookShelf/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookShelfClient) Update(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := c.cc.Invoke(ctx, "/gbookshelf.BookShelf/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookShelfServer is the server API for BookShelf service.
type BookShelfServer interface {
	List(context.Context, *Void) (*Books, error)
	Add(context.Context, *Book) (*Book, error)
	Remove(context.Context, *Book) (*Book, error)
	Update(context.Context, *Book) (*Book, error)
}

func RegisterBookShelfServer(s *grpc.Server, srv BookShelfServer) {
	s.RegisterService(&_BookShelf_serviceDesc, srv)
}

func _BookShelf_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookShelfServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gbookshelf.BookShelf/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookShelfServer).List(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookShelf_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookShelfServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gbookshelf.BookShelf/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookShelfServer).Add(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookShelf_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookShelfServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gbookshelf.BookShelf/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookShelfServer).Remove(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookShelf_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookShelfServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gbookshelf.BookShelf/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookShelfServer).Update(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

var _BookShelf_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gbookshelf.BookShelf",
	HandlerType: (*BookShelfServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _BookShelf_List_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _BookShelf_Add_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _BookShelf_Remove_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BookShelf_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gbookshelf.proto",
}
