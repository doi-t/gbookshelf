/**
 * @fileoverview gRPC-Web generated client stub for gbookshelf
 * @enhanceable
 * @public
 */

// GENERATED CODE -- DO NOT EDIT!



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.gbookshelf = require('./gbookshelf_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?Object} options
 * @constructor
 * @struct
 * @final
 */
proto.gbookshelf.BookShelfClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options['format'] = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname;

  /**
   * @private @const {?Object} The credentials to be used to connect
   *    to the server
   */
  this.credentials_ = credentials;

  /**
   * @private @const {?Object} Options for the client
   */
  this.options_ = options;
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?Object} options
 * @constructor
 * @struct
 * @final
 */
proto.gbookshelf.BookShelfPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options['format'] = 'text';

  /**
   * @private @const {!proto.gbookshelf.BookShelfClient} The delegate callback based client
   */
  this.delegateClient_ = new proto.gbookshelf.BookShelfClient(
      hostname, credentials, options);

};


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.gbookshelf.Void,
 *   !proto.gbookshelf.Books>}
 */
const methodInfo_BookShelf_List = new grpc.web.AbstractClientBase.MethodInfo(
  proto.gbookshelf.Books,
  /** @param {!proto.gbookshelf.Void} request */
  function(request) {
    return request.serializeBinary();
  },
  proto.gbookshelf.Books.deserializeBinary
);


/**
 * @param {!proto.gbookshelf.Void} request The
 *     request proto
 * @param {!Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.Error, ?proto.gbookshelf.Books)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gbookshelf.Books>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gbookshelf.BookShelfClient.prototype.list =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gbookshelf.BookShelf/List',
      request,
      metadata,
      methodInfo_BookShelf_List,
      callback);
};


/**
 * @param {!proto.gbookshelf.Void} request The
 *     request proto
 * @param {!Object<string, string>} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gbookshelf.Books>}
 *     The XHR Node Readable Stream
 */
proto.gbookshelf.BookShelfPromiseClient.prototype.list =
    function(request, metadata) {
  return new Promise((resolve, reject) => {
    this.delegateClient_.list(
      request, metadata, (error, response) => {
        error ? reject(error) : resolve(response);
      });
  });
};


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.gbookshelf.Book,
 *   !proto.gbookshelf.Book>}
 */
const methodInfo_BookShelf_Add = new grpc.web.AbstractClientBase.MethodInfo(
  proto.gbookshelf.Book,
  /** @param {!proto.gbookshelf.Book} request */
  function(request) {
    return request.serializeBinary();
  },
  proto.gbookshelf.Book.deserializeBinary
);


/**
 * @param {!proto.gbookshelf.Book} request The
 *     request proto
 * @param {!Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.Error, ?proto.gbookshelf.Book)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gbookshelf.Book>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gbookshelf.BookShelfClient.prototype.add =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gbookshelf.BookShelf/Add',
      request,
      metadata,
      methodInfo_BookShelf_Add,
      callback);
};


/**
 * @param {!proto.gbookshelf.Book} request The
 *     request proto
 * @param {!Object<string, string>} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gbookshelf.Book>}
 *     The XHR Node Readable Stream
 */
proto.gbookshelf.BookShelfPromiseClient.prototype.add =
    function(request, metadata) {
  return new Promise((resolve, reject) => {
    this.delegateClient_.add(
      request, metadata, (error, response) => {
        error ? reject(error) : resolve(response);
      });
  });
};


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.gbookshelf.Book,
 *   !proto.gbookshelf.Book>}
 */
const methodInfo_BookShelf_Remove = new grpc.web.AbstractClientBase.MethodInfo(
  proto.gbookshelf.Book,
  /** @param {!proto.gbookshelf.Book} request */
  function(request) {
    return request.serializeBinary();
  },
  proto.gbookshelf.Book.deserializeBinary
);


/**
 * @param {!proto.gbookshelf.Book} request The
 *     request proto
 * @param {!Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.Error, ?proto.gbookshelf.Book)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gbookshelf.Book>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gbookshelf.BookShelfClient.prototype.remove =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gbookshelf.BookShelf/Remove',
      request,
      metadata,
      methodInfo_BookShelf_Remove,
      callback);
};


/**
 * @param {!proto.gbookshelf.Book} request The
 *     request proto
 * @param {!Object<string, string>} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gbookshelf.Book>}
 *     The XHR Node Readable Stream
 */
proto.gbookshelf.BookShelfPromiseClient.prototype.remove =
    function(request, metadata) {
  return new Promise((resolve, reject) => {
    this.delegateClient_.remove(
      request, metadata, (error, response) => {
        error ? reject(error) : resolve(response);
      });
  });
};


/**
 * @const
 * @type {!grpc.web.AbstractClientBase.MethodInfo<
 *   !proto.gbookshelf.Book,
 *   !proto.gbookshelf.Book>}
 */
const methodInfo_BookShelf_Update = new grpc.web.AbstractClientBase.MethodInfo(
  proto.gbookshelf.Book,
  /** @param {!proto.gbookshelf.Book} request */
  function(request) {
    return request.serializeBinary();
  },
  proto.gbookshelf.Book.deserializeBinary
);


/**
 * @param {!proto.gbookshelf.Book} request The
 *     request proto
 * @param {!Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.Error, ?proto.gbookshelf.Book)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gbookshelf.Book>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gbookshelf.BookShelfClient.prototype.update =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gbookshelf.BookShelf/Update',
      request,
      metadata,
      methodInfo_BookShelf_Update,
      callback);
};


/**
 * @param {!proto.gbookshelf.Book} request The
 *     request proto
 * @param {!Object<string, string>} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gbookshelf.Book>}
 *     The XHR Node Readable Stream
 */
proto.gbookshelf.BookShelfPromiseClient.prototype.update =
    function(request, metadata) {
  return new Promise((resolve, reject) => {
    this.delegateClient_.update(
      request, metadata, (error, response) => {
        error ? reject(error) : resolve(response);
      });
  });
};


module.exports = proto.gbookshelf;

