import { Void, Book } from 'gbookshelf_pb'
import { BookShelfClient } from 'gbookshelf_grpc_web_pb'

const state = {
  books: []
}

const getters = {
  allBooks: (state) => state.books
}

const actions = {
  fetchBooks ({ commit }) {
    // It should be a 'List' function in somewhere else
    this.client = new BookShelfClient('http://dev-gbookshelf-server:8080', null, null) // TODO: make 'dev-' dynamic
    let voidRequest = new Void()
    const call = this.client.list(voidRequest, {}, (err, response) => {
      if (err) {
        console.log(err.code)
        console.log(err.message)
      } else {
        this.books = response.toObject().booksList
        console.log('init global state:', this.books)
        commit('setBooks', this.books)
      }
    })
    call.on('status', function (status) {
      console.log(status.code)
      console.log(status.details)
      console.log(status.metadata)
    })
  },
  addBook ({ commit }, title) { // FIXME: 'addBook' must take book instead of just a title
    let newBook = new Book()
    newBook.setTitle(title)
    console.log('Adding new book...', newBook)

    const call = this.client.add(newBook, {}, (err, response) => {
      if (err) {
        console.log(err.code)
        console.log(err.message)
      } else {
        this.response = response.toObject()
        console.log(this.response)
        console.log(this.response.title, 'has been added.')
        commit('newBook', this.response)
      }
    })
    call.on('status', function (status) {
      console.log(status.code)
      console.log(status.details)
      console.log(status.metadata)
    })
  },
  removeBook ({ commit }, title) { // FIXME: The id should be given here instead of title
    let removeBook = new Book()
    removeBook.setTitle(title)
    console.log('Removing a book...', removeBook)

    const call = this.client.remove(removeBook, {}, (err, response) => {
      if (err) {
        console.log(err.code)
        console.log(err.message)
      } else {
        this.response = response.toObject()
        console.log(this.response.title, 'has been deleted.')
        commit('removeBook', this.response)
      }
    })
    call.on('status', function (status) {
      console.log(status.code)
      console.log(status.details)
      console.log(status.metadata)
    })
  },
  updateBook ({ commit }, book) {
    let updateBook = new Book()
    updateBook.setTitle(book.title)
    updateBook.setPage(9999)
    updateBook.setCurrent(book.current)
    updateBook.setDone(true)

    const call = this.client.update(updateBook, {}, (err, response) => {
      if (err) {
        console.log(err.code)
        console.log(err.message)
      } else {
        this.response = response.toObject()
        console.log(this.response.title, 'has been updated.')
        commit('updateBook', this.response)
      }
    })
    call.on('status', function (status) {
      console.log(status.code)
      console.log(status.details)
      console.log(status.metadata)
    })
  }
}

// FIXME: All Id check should be done by uuid generated by server instead of title
const mutations = {
  setBooks: (state, books) => (state.books = books),
  newBook: (state, book) => state.books.unshift(book),
  removeBook: (state, rmvBook) => (state.books = state.books.filter(book => book.title !== rmvBook.title)), // FIXME: filter does not work as I expected.
  updateBook: (state, updBook) => {
    const index = state.books.findIndex(book => {
      return book.title === updBook.title
    })
    if (index !== -1) {
      state.books.splice(index, 1, updBook)
    }
  }
}

export default {
  state,
  getters,
  actions,
  mutations
}
